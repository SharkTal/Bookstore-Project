from typing import List, Optional
from datetime import date

from pydantic import BaseModel, EmailStr, constr, conint

class GenreBase(BaseModel):
	name: str


class GenreCreate(GenreBase):
	# This must be here instead of 'Genre' class to avoid
	# recursion error when genre and book show eachother
	# On a second thought i might not need books here at all
	#books: List['Book'] = []
	pass


class Genre(GenreBase):
	id: int

	class Config:
		orm_mode = True


class UserBase(BaseModel):
	username: constr(max_length=20) # https://pydantic-docs.helpmanual.io/usage/types/#constrained-types
	email: Optional[EmailStr] = None # Maybe hide email somewhere


class UserCreate(UserBase):
	password: str


class User(UserBase):
	id: int
	is_active: Optional[bool] = True
	is_admin: Optional[bool] = False
	register_date: date

	class Config:
		orm_mode = True


class ReviewBase(BaseModel):
	# https://pydantic-docs.helpmanual.io/usage/types/#constrained-types
	rating: conint(lt=6)
	comment: str


class ReviewCreate(ReviewBase):
	pass


class Review(ReviewBase):
	id: int
	user: User
	edited: bool

	class Config:
		orm_mode = True


class BookBase(BaseModel):
	title: str
	description: Optional[str] = None # Make required
	language: Optional[str] = None
	price: float = 0
	publication_date: date
	isbn: Optional[str] = None


class BookCreate(BookBase):
	genres: List[str]
	# Default values to make testing faster
	image: str = "iVBORw0KGgoAAAANSUhEUgAAABEAAAAXCAYAAADtNKTnAAAABHNCSVQICAgIfAhkiAAAAdBJREFUOI3tlE1uE0EQhb/+m/GMrShGSiwHwo8IG07AIhyCyyAOwFm4ABdAYssCRYhEASwSZYMSE1Bij7vnp1n0EI899iobFvSqq+b1q/eqq0c86z313HLJ2xL8QySiRIedx7w4of+8CNGHIedvuovgrUv6L8cYBeQpV693yK4WlAiKkxj/t8XbOXpJoxi4ee6iQz6p91417HxPKMr6wJZF6iaFR911CBGi6rRDUc2/3kD9rw75WGAGHmKL2fa4s/qUqND38hooKUYx3PlN/9U5RjcbW8W4bxIPIHLMTqOUdOhhHZcxbqQQDZ0N54L8OAEPCI964G6AYsOhN+pg3MFdgs8i7PtNpu82WXQ+SnH5NXEEcneGlAllBexmaFUL+ZKGXJYwfZssKwEmKe401BeDjKgbmqofzZAC8Ir8KGb5nSySeI07rEHaYu5XIAvMw/raZgl21J7PVqY86lKWgCgxexaRZJhhqO2/dslti2PF2P9IsRfBknySoR5nGAN4ifuUUq14822SKsJ9Dv0Wgwm9/WkYMpdgD1WbYSUJguKgG25AWaK9EgFUxz3cpI1eQwL+rIf92Uwo8o+rrawloYyZHURzjixltsYKgPj/e2ytP0Bvq196uVzkAAAAAElFTkSuQmCC"
	file: str = ""


class Book(BookBase):
	id: int
	avg_rating: Optional[float]
	authors: List['Author']
	genres: List[Genre]

	class Config:
		orm_mode = True


class BookUpdate(BaseModel):
	title: Optional[str]
	description: Optional[str]
	language: Optional[str]
	price: Optional[float]
	publication_date: Optional[date]
	isbn: Optional[str]
	image: Optional[str]
	file: Optional[str]



# https://github.com/samuelcolvin/pydantic/issues/1333
# Need this so classes can refrence each other
Genre.update_forward_refs()


class ShoppingCart(BaseModel):
	book_ids: List[int]


class AuthorBase(BaseModel):
	name: str


class AuthorCreate(AuthorBase):
	pass

class Author(AuthorBase):
	id: int
	#books: List[Book] = []

	class Config:
		orm_mode = True


Book.update_forward_refs()


class OrderBase(BaseModel):
	order_date: date
	total_price: float

class OrderCreate(OrderBase):
	pass

class Order(OrderBase):
	id: int
	client: User
	ordered_books: List[Book]

	class Config:
		orm_mode = True


class Token(BaseModel):
	access_token: str
	token_type: str = "bearer"


class TokenData(BaseModel):
	username: Optional[str] = None